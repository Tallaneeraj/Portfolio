# -*- coding: utf-8 -*-
"""DV project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bVQcqlmeDUZCZR3O11mbQR481ZsqDcTq

Data on Energy by Our World in Data  
https://github.com/owid/energy-data
"""

import pandas as pd
import matplotlib.pyplot as plt
import geopandas as gpd

raw_data_url= 'https://raw.githubusercontent.com/owid/energy-data/master/owid-energy-data.csv'

df = pd.read_csv(raw_data_url)
print(df.head())
df['gdp_per_capita'] = df.apply(lambda row: row['gdp'] / row['population'] if row['population'] != 0 else 0, axis=1)

unique_country = df['country'].unique()
print(unique_country)
country = ['Central & South America (EIA)', 'Central African Republic',
 'Central America (EI)', 'Eastern Africa (EI)', 'Europe' , 'European Union (27)', 'G20 (Ember)' ,'G7 (Ember)', 'Latin America and Caribbean (Ember)', 'Low-income countries', 'Lower-middle-income countries', 'Middle Africa (EI)' ,'Middle East (EI)', 'High-income countries', 'Non-OECD (EI)', 'Non-OPEC (EI)', 'North America', 'OECD (EI)', 'OPEC (EI)' , 'South and Central America (EI)', 'Upper-middle-income countries',  'Western Africa (EI)']
#print(country)

plt.plot(df[df['country']=='India']['year'], df[df['country']=='India']['wind_electricity'])

print(df.shape)
null_counts = df.isnull().sum()
total_rows = len(df)
null_percentage = (null_counts / total_rows) * 100
print(sum(null_counts))
print(sum(null_counts)/(21748*130))
print("Percentage of null values in each column:")
print(null_percentage)

"""Data from 1900 to 1980/90 is misssing i think we can consider it as 0

Every energy source example coal has 7 columns
coal_cons_change_pct - Annual percentage change in coal consumption

coal_cons_change_twh - Annual change in coal consumption

coal_cons_per_capita - Coal consumption per capita - Measured in kilowatt-hours per person.

coal_consumption - Primary energy consumption from coal - Measured in terawatt-hours.

coal_elec_per_capita -Electricity generation from coal per person - Measured in kilowatt-hours per person.

coal_electricity - Electricity generation from coal - Measured in terawatt-hours.

coal_prod_change_pct - Annual change in coal production - Measured as a percentage of the previous year's production.

coal_prod_change_twh - Annual change in coal production - Measured in terawatt-hours.

coal_prod_per_capita - Coal production per capita - Measured in kilowatt-hours per capita.

coal_production - Coal production - Measured in terawatt-hours.

coal_share_elec - Share of electricity generated by coal - Measured as a percentage of total electricity.

coal_share_energy - Share of primary energy consumption that comes from coal - Measured as a percentage of the total primary energy, using the substitution method.

IDEAS:
1 - use https://ourworldindata.org/energy#all-charts

2 - can make charts based on annual consumption of every country over the years, consumption vs production over the  years, share of all sources of the country over the years (stacked bar),  

Temporal Analysis: Analyze how renewable energy trends have evolved over time. Use time series analysis techniques to identify long-term trends, seasonal patterns, and cyclical variations in renewable energy generation and consumption.

Geospatial Analysis: Explore the geographical distribution of renewable energy resources and infrastructure. Create maps and interactive visualizations to illustrate the regional variations in renewable energy capacity, production, and investment.

Comparison Across Countries/Regions: Compare renewable energy trends across different countries or regions. Identify leading countries in renewable energy adoption and analyze the factors contributing to their success or challenges faced by other countries.

Sector-wise Analysis: Analyze the contribution of renewable energy sources (e.g., solar, wind, hydroelectric, bioenergy) to the overall energy mix. Explore how renewable energy is used in different sectors such as electricity generation, transportation, and heating.

Impact of Policies and Regulations: Investigate the impact of government policies, incentives, and regulatory frameworks on renewable energy deployment. Analyze how changes in policies have influenced investment trends, technology adoption, and market dynamics.

Social and Environmental Impact: Explore the social, economic, and environmental implications of renewable energy deployment. Visualize data on job creation, greenhouse gas emissions reduction, air and water pollution, and land use changes associated with renewable energy projects.

**Economical Impact of Electricity on Nations / Relation between Energy and Economy of a Country**
"""

# Declarations

latest_year = 2021

selected_country = ['Central & South America (EIA)', 'Central African Republic',
 'Central America (EI)', 'Eastern Africa (EI)', 'Europe' , 'European Union (27)', 'G20 (Ember)' ,'G7 (Ember)', 'Latin America and Caribbean (Ember)', 'Low-income countries', 'Lower-middle-income countries', 'Middle Africa (EI)' ,'Middle East (EI)', 'High-income countries', 'Non-OECD (EI)', 'Non-OPEC (EI)', 'North America', 'OECD (EI)', 'OPEC (EI)' , 'South and Central America (EI)', 'Upper-middle-income countries',  'Western Africa (EI)']

filtered_data = df[(df['year'] == latest_year) & (df['country'].isin(selected_country))]

# Creating the scatter plot
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['population'], filtered_data['energy_per_capita'], alpha=0.5)

# Annotating each point with the country name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['population'], row['energy_per_capita']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'Population vs Energy Consumption per Capita in {latest_year}')
plt.xlabel('Population')
plt.ylabel('Energy Consumption per Capita (kilowatt-hours per person)')
plt.grid(True)
plt.show()

filtered_data = df[(df['year'] == 2021) & (df['country'].isin(selected_country))]

# Creating the scatter plot
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['electricity_generation'], filtered_data['electricity_demand'], alpha=0.5)

# Annotating each point with the country or region name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['electricity_generation'], row['electricity_demand']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'Electricity Generation vs. Electricity Demand in {latest_year}')
plt.xlabel('Electricity Generation (TWh)')
plt.ylabel('Electricity Demand (TWh)')
plt.grid(True)
plt.show()

filtered_data = df[df['year'] == 2018]

# Creating the scatter plot
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['gdp_per_capita'], filtered_data['low_carbon_energy_per_capita'], alpha=0.6)

# Annotating each point with the country or region name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['gdp_per_capita'], row['low_carbon_energy_per_capita']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'GDP per Capita vs low carbon energy production per Capita in {latest_year}')
plt.xlabel('GDP per Capita (International-$)')
plt.ylabel('Low Carbon Energy Consumption per Capita (kWh)')
plt.grid(True)
plt.show()

print(df[df['year']==2021]['gdp_per_capita'])

filtered_data = df[df['year'] == 2018]

# Creating the scatter plot
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['gdp_per_capita'], filtered_data['renewables_energy_per_capita'], alpha=0.6)

# Annotating each point with the country or region name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['gdp_per_capita'], row['renewables_energy_per_capita']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'GDP per Capita vs Renewable Energy Consumption per Capita in {latest_year}')
plt.xlabel('GDP per Capita (International-$)')
plt.ylabel('Renewable Energy Consumption per Capita (kWh)')
plt.grid(True)
plt.show()

filtered_data = df[df['year'] == 2018]

# Creating the scatter plot
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['gdp_per_capita'], filtered_data['fossil_fuel_consumption'], alpha=0.6)

# Annotating each point with the country or region name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['gdp_per_capita'], row['fossil_fuel_consumption']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'GDP per Capita vs fossil fuel consumption per Capita in {latest_year}')
plt.xlabel('GDP per Capita (International-$)')
plt.ylabel('fossil fuel Consumption per Capita (kWh)')
plt.grid(True)
plt.show()

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))


latest_df = df[df['year'] == 2021]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.boundary.plot(ax=ax)
world.plot(column='fossil_share_energy', ax=ax, legend=True,
           legend_kwds={'label': "Share of Fossil Energy",
                        'orientation': "horizontal"})
plt.title('Share of Fossil Energy')
plt.show()

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

latest_df = df[df['year'] == 2021]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.boundary.plot(ax=ax)
world.plot(column='fossil_energy_per_capita', ax=ax, legend=True,
           legend_kwds={'label': "Fossil Energy per capita",
                        'orientation': "horizontal"})
plt.title('Global Fossil Energy per capita')
plt.show()

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))


latest_df = df[df['year'] == 2019]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.boundary.plot(ax=ax)
world.plot(column='greenhouse_gas_emissions', ax=ax, legend=True,
           legend_kwds={'label': "Share of Greenhouse gas emissions",
                        'orientation': "horizontal"})
plt.title('Global Share of Greenhouse gas emissions')
plt.show()

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))


latest_df = df[df['year'] == 2019]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.boundary.plot(ax=ax)
world.plot(column='low_carbon_energy_per_capita', ax=ax, legend=True,
           legend_kwds={'label': "Share of Low Carbon Energy per capita",
                        'orientation': "horizontal"})
plt.title('Global Low Carbon Energy per capita')
plt.show()

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))


latest_df = df[df['year'] == 2019]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.boundary.plot(ax=ax)
world.plot(column='nuclear_share_energy', ax=ax, legend=True,
           legend_kwds={'label': "Share of Nuclear energy",
                        'orientation': "horizontal"})
plt.title('Share of Nuclear Energy')
plt.show()

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))


latest_df = df[df['year'] == 2019]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
world.boundary.plot(ax=ax)
world.plot(column='renewables_share_energy', ax=ax, legend=True,
           legend_kwds={'label': "Share of Renewables energy",
                        'orientation': "horizontal"})
plt.title('Share of Renewables Energy')
plt.show()

"""**Case of Europe**"""

top_european_countries = ['United Kingdom', 'France', 'Germany', 'Spain', 'Italy']

filtered_data = df[df['country'].isin(top_european_countries)]

# Setting the plot size
plt.figure(figsize=(12, 8))

# Colors for the lines
colors = ['blue', 'green', 'red', 'purple', 'orange']

# Plotting each country's data with a different color
for country, color in zip(top_european_countries, colors):
    country_data = filtered_data[filtered_data['country'] == country]
    plt.plot(country_data['year'], country_data['renewables_share_energy'], label=country, color=color, marker='o')

    # Annotating the last point for each country
    last_year = country_data['year'].iloc[-1]
    last_gdp = country_data['renewables_share_energy'].iloc[-1]
    plt.text(last_year, last_gdp, f'{country}', fontsize=9)

# Adding title and labels
plt.title('Share of Renewable Energy Trends for the top European Countries')
plt.xlabel('Year')
plt.ylabel('%')

# Adding grid and legend
plt.grid(True)
plt.legend()

# Show the plot
plt.show()

plt.figure(figsize=(12, 8))

# Colors for the lines
colors = ['blue', 'green', 'red', 'purple', 'orange']

# Plotting each country's data with a different color
for country, color in zip(top_european_countries, colors):
    country_data = filtered_data[filtered_data['country'] == country]
    plt.plot(country_data['year'], country_data['greenhouse_gas_emissions'], label=country, color=color, marker='o')

    # Annotating the last point for each country
    last_year = country_data['year'].iloc[-1]
    last_gdp = country_data['greenhouse_gas_emissions'].iloc[-1]
    plt.text(last_year, last_gdp, f'{country}', fontsize=9)

# Adding title and labels
plt.title('Greenhouse gas emissions Trends for the top European Countries')
plt.xlabel('Year')
plt.ylabel('million tonnes COâ‚‚ equivalents')

# Adding grid and legend
plt.grid(True)
plt.legend()

# Show the plot
plt.show()

top_european_countries = ['United Kingdom', 'France', 'Germany', 'Spain', 'Italy']

filtered_data = df[df['country'].isin(top_european_countries)]

# Setting the plot size
plt.figure(figsize=(12, 8))

# Colors for the lines
colors = ['blue', 'green', 'red', 'purple', 'orange']

# Plotting each country's data with a different color
for country, color in zip(top_european_countries, colors):
    country_data = filtered_data[filtered_data['country'] == country]
    plt.plot(country_data['year'], country_data['low_carbon_share_energy'], label=country, color=color, marker='o')

    # Annotating the last point for each country
    last_year = country_data['year'].iloc[-1]
    last_gdp = country_data['low_carbon_share_energy'].iloc[-1]
    plt.text(last_year, last_gdp, f'{country}', fontsize=9)

# Adding title and labels
plt.title('Share of Low Carbon Energy Trends for the top European Countries')
plt.xlabel('Year')
plt.ylabel('%')

# Adding grid and legend
plt.grid(True)
plt.legend()

# Show the plot
plt.show()

european_countries = [
    'Albania', 'Andorra', 'Armenia', 'Austria', 'Azerbaijan', 'Belarus',
    'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Cyprus',
    'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Georgia',
    'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Kosovo',
    'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Malta', 'Moldova',
    'Monaco', 'Montenegro', 'Netherlands', 'North Macedonia', 'Norway',
    'Poland', 'Portugal', 'Romania', 'Russia', 'San Marino', 'Serbia',
    'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine',
    'United Kingdom', 'Vatican City'
]
filtered_data = df[(df['year'] == 2021) & df['country'].isin(european_countries)]
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['electricity_generation'], filtered_data['electricity_demand'], alpha=0.5)

# Annotating each point with the country or region name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['electricity_generation'], row['electricity_demand']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'Electricity Generation vs. Electricity Demand in {latest_year} in Europe')
plt.xlabel('Electricity Generation (TWh)')
plt.ylabel('Electricity Demand (TWh)')
plt.grid(True)
plt.show()

filtered_data = df[df['country'].isin(top_european_countries)]

# Setting the plot size
plt.figure(figsize=(12, 8))

# Colors for the lines
colors = ['blue', 'green', 'red', 'purple', 'orange']

# Plotting each country's data with a different color
for country, color in zip(top_european_countries, colors):
    country_data = filtered_data[filtered_data['country'] == country]
    plt.plot(country_data['year'], country_data['primary_energy_consumption'], label=country, color=color, marker='o')

    # Annotating the last point for each country
    last_year = country_data['year'].iloc[-1]
    last_gdp = country_data['primary_energy_consumption'].iloc[-1]
    plt.text(last_year, last_gdp, f'{country}', fontsize=9)

# Adding title and labels
plt.title('Share of Primary Energy Consumption for the top European Countries')
plt.xlabel('Year')
plt.ylabel('terawatt-hours')

# Adding grid and legend
plt.grid(True)
plt.legend()

# Show the plot
plt.show()

top_european_countries = ['United Kingdom', 'France', 'Germany', 'Spain', 'Italy']

# Define the energy sources
energy_sources = ['wind_share_elec', 'solar_share_elec', 'biofuel_share_elec', 'coal_share_elec',
                  'oil_share_elec', 'gas_share_elec',  'nuclear_share_elec',
                  'hydro_share_elec']

# Filter data for the selected countries and year 2022
filtered_data = df[(df['country'].isin(top_european_countries)) & (df['year'] == 2022)]

# Ensure the data is ready for plotting; this avoids any issue with pivoting if not needed
# Select only the relevant columns for plotting
plot_data = filtered_data.set_index('country')[energy_sources]

# Plotting the stacked bar chart
fig, ax = plt.subplots(figsize=(10, 6))
plot_data.plot(kind='bar', stacked=True, ax=ax, legend=True)

# Customize the plot
ax.set_title('Share of Different Electricity Sources by Country in 2022')
ax.set_ylabel('Percentage (%)')
ax.set_xlabel('Country')
plt.xticks(rotation=45)
plt.legend(title='Energy Source', loc='upper left', bbox_to_anchor=(1, 1))
plt.tight_layout()

# Show the plot
plt.show()

"""**Developing Countries**"""

developing_countries = ['India', 'Brasil', 'Argentina', 'South Africa', 'China' , 'Indonesia', 'Mexico', 'Nigeria']
filtered_data = df[(df['country'].isin(developing_countries)) & (df['year'] == 2022)]

# Ensure the data is ready for plotting; this avoids any issue with pivoting if not needed
# Select only the relevant columns for plotting
plot_data = filtered_data.set_index('country')[energy_sources]

# Plotting the stacked bar chart
fig, ax = plt.subplots(figsize=(10, 6))
plot_data.plot(kind='bar', stacked=True, ax=ax, legend=True)

# Customize the plot
ax.set_title('Share of Different Electricity Sources by  Developing Country in 2022')
ax.set_ylabel('Percentage (%)')
ax.set_xlabel('Country')
plt.xticks(rotation=45)
plt.legend(title='Energy Source', loc='upper left', bbox_to_anchor=(1, 1))
plt.tight_layout()

# Show the plot
plt.show()

filtered_data = df[(df['year'] == 2022) & df['country'].isin(developing_countries)]
plt.figure(figsize=(12, 8))
plt.scatter(filtered_data['electricity_generation'], filtered_data['electricity_demand'], alpha=0.5)

# Annotating each point with the country or region name
for i, row in filtered_data.iterrows():
    plt.annotate(row['country'], (row['electricity_generation'], row['electricity_demand']), textcoords="offset points", xytext=(0,10), ha='center')

plt.title(f'Electricity Generation vs. Electricity Demand in {latest_year} in Developing Countries')
plt.xlabel('Electricity Generation (TWh)')
plt.ylabel('Electricity Demand (TWh)')
plt.grid(True)
plt.show()

"""### Energy Consumption Over Time"""

years = df['year'].unique()

consumption_energies = ['biofuel_consumption', 'coal_consumption', 'fossil_fuel_consumption', 'gas_consumption',
                                         'hydro_consumption', 'low_carbon_consumption', 'nuclear_consumption', 'oil_consumption', 'other_renewable_consumption',
                                         'primary_energy_consumption', 'renewables_consumption', 'solar_consumption', 'wind_consumption']

cons_data_selected = df[['year'] + consumption_energies]
cons_data_selected = cons_data_selected[(cons_data_selected['year'] >= 1970)]

summed_cons_data = cons_data_selected.groupby('year').sum()

# Plotting energy consumption trends
plt.figure(figsize=(10, 6))
for energy in consumption_energies:
    plt.plot(summed_cons_data[energy], label=energy)

plt.title('Energy Consumption Trends Over Time')
plt.xlabel('Year')
plt.ylabel('Consumption (TWh)')
plt.legend()
plt.grid(True)
plt.show()

"""### Energy Production Over Time"""

production_energies = ['coal_production', 'gas_production', 'oil_production']

prod_data_selected = df[['year'] + production_energies]
summed_prod_data = prod_data_selected.groupby('year').sum()

# Plotting energy production trends
plt.figure(figsize=(10, 6))
for energy in production_energies:
    plt.plot(summed_prod_data[energy], label=energy)

plt.title('Energy Production Trends Over Time')
plt.xlabel('Year')
plt.ylabel('Production (TWh)')
plt.legend()
plt.grid(True)
plt.show()

"""### Electricity Production by Source"""

electricity_prod_by_source = ['biofuel_electricity', 'coal_electricity', 'fossil_electricity',  'gas_electricity', 'hydro_electricity',  'low_carbon_electricity', 'nuclear_electricity', 'oil_electricity',
                              'other_renewable_electricity', 'solar_electricity', 'wind_electricity']

elec_prod_by_source_selected = df[['year'] + electricity_prod_by_source]
elec_prod_by_source_selected = elec_prod_by_source_selected[(elec_prod_by_source_selected['year'] >= 1970)]

summed_elec_prod_by_source = elec_prod_by_source_selected.groupby('year').sum()

# Plotting energy production trends
plt.figure(figsize=(10, 6))
for energy in electricity_prod_by_source:
    plt.plot(summed_elec_prod_by_source[energy], label=energy)

plt.title('Electricity Production by Source')
plt.xlabel('Year')
plt.ylabel('Production (TWh)')
plt.legend()
plt.grid(True)
plt.show()

us_data = df[(df['country'] == 'United States') & (df['year'] >= 2000) & (df['year'] < 2023)]

pct_chg_cons_renew = ['biofuel_cons_change_pct', 'hydro_cons_change_pct', 'solar_cons_change_pct', 'wind_cons_change_pct']
renew_labels = ['Biofuel', 'Hydro', 'Solar', 'Wind']

pct_chg_cons_non_renew = ['coal_cons_change_pct', 'gas_cons_change_pct', 'nuclear_cons_change_pct','oil_cons_change_pct']
non_renew_labels = ['Coal', 'Gas', 'Nuclear', 'Oil']

us_energy_data_renew = us_data[['year'] + pct_chg_cons_renew]
us_energy_data_non_renew = us_data[['year'] + pct_chg_cons_non_renew]

us_years = [i for i in range(2000, 2023)]

"""Annual Percentage Change in Renewable Energy Consumption by United States in 21st Century"""

plt.figure(figsize=(10, 6))
for i, pct in enumerate(pct_chg_cons_renew):
    plt.bar(us_years, us_energy_data_renew[pct], label=renew_labels[i])

# Add labels and title
plt.xlabel('Year')
plt.ylabel('Annual Percentage Change (%)')
plt.title('Annual Percentage Change in Renewable Energy Consumption by United States in 21st Century')
plt.legend()
plt.grid(True)

# Show the plot
plt.tight_layout()
plt.show()

"""Annual Percentage Change in Non-Renewable Energy Consumption by United States in 21st Century"""

plt.figure(figsize=(10, 6))
for i, pct in enumerate(pct_chg_cons_non_renew):
    plt.bar(us_years, us_energy_data_non_renew[pct], label=non_renew_labels[i])

# Add labels and title
plt.xlabel('Year')
plt.ylabel('Annual Percentage Change (%)')
plt.title('Annual Percentage Change in Non-Renewable Energy Consumption by United States in 21st Century')
plt.legend()
plt.grid(True)

# Show the plot
plt.tight_layout()
plt.show()

"""### Electricity generation from solar power in 2000"""

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

latest_df = df[df['year'] == 2000]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(10, 7))
world.boundary.plot(ax=ax)
world.plot(column='solar_electricity', ax=ax, legend=True,
           legend_kwds={'label': "Electricity generation from Solar Power (terawatt)",
                        'orientation': "horizontal"})
plt.title('Global Electricity Generation from Solar Power in 2000')
plt.show()

"""### Electricity generation from solar power in 2020"""

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

latest_df = df[df['year'] == 2020]
world = world.merge(latest_df, how='left', left_on='iso_a3', right_on='iso_code')

# Plotting the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(10, 7))
world.boundary.plot(ax=ax)
world.plot(column='solar_electricity', ax=ax, legend=True,
           legend_kwds={'label': "Electricity generation from Solar Power (terawatt)",
                        'orientation': "horizontal"})
plt.title('Global Electricity Generation from Solar Power in 2020')
plt.show()

